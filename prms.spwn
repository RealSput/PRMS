let prms = {
    promise: (cb) {
        rdict = { 
            resolve: () {
                let fnuuy_ctx = $.trigger_fn_context()
                let rval
                resolve = (val = true) {
                    -> return
                    $.extend_trigger_func(fnuuy_ctx, () => rval = val)
                }
                cb(resolve)
                return rval
            }
        }
        return rdict
    },
    await: (promises: @dictionary | @array, cb = () {}) {
        if promises.type == @dictionary {
            return promises.resolve() // bro why would you do this
        } else {
            let funnier_ctx = !{ -> return }
            let funniest_ctx = $.trigger_fn_context()
            let pool = (' ' * (promises.length - 1)).split(' ').map(x => !{})
            let results = []
            for i in 0..pool.length {
                $.extend_trigger_func(pool[i], () {
                    let j = promises[i].resolve()
                    if i == pool.length - 1 { funnier_ctx! }
                    $.extend_trigger_func(funniest_ctx, () => results.push(j))
                })
                pool[i]!
            }
            $.extend_trigger_func(0g, () => cb(results, 0g))
        }
    }
}
return prms
